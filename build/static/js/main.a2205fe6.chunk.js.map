{"version":3,"sources":["pages/Input.js","pages/List.js","TodoList.js","serviceWorker.js","pages/context.js","components/List.js","components/Button.js","pages/Demo2.js","pages/Home.js","components/Control.js","pages/Demo01.js","pages/App.js","index.js"],"names":["Input","props","ref","this","refs","value","type","onChange","onClick","addTodo","Component","List","renderTodos","done","todos","map","todo","idx","toggle","checked","title","delButton","console","log","tds","arr1","filter","item","arr2","length","TodoList","handleChange","e","setState","inpValue","target","state","index","localStorage","setItem","JSON","stringify","newTodos","input","focus","getItem","parse","inp","Boolean","window","location","hostname","match","Context","React","createContext","data","btns","Button","key","getData","Demo02","Consumer","changeData","Demo01","style","width","height","defaultProps","name","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAyBeA,E,kDApBX,WAAYC,GAAO,uCACTA,G,qDAGN,OACI,6BACI,2BACIC,IAAKC,KAAKF,MAAMG,KAChBC,MAAOF,KAAKF,MAAMI,MAClBC,KAAK,OACLC,SAAUJ,KAAKF,MAAMM,WAEzB,4BAAQC,QAASL,KAAKF,MAAMQ,SAA5B,qB,GAbIC,aCmCLC,E,kDArCX,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IAEVW,YAAc,SAACC,GACX,OAAO,EAAKZ,MAAMa,MAAMC,KAAI,SAACC,EAAMC,GAC/B,GAAIJ,GAAQG,EAAKH,KACb,OAAO,4BACH,2BACIL,QAAS,kBAAM,EAAKP,MAAMiB,OAAOD,IACjCE,QAASN,EAAMP,KAAK,aACxB,8BAAOU,EAAKI,OACZ,4BAAQZ,QAAS,kBAAM,EAAKP,MAAMoB,UAAUJ,KAA5C,qBAXG,E,qDAkBfK,QAAQC,IAAIpB,KAAKF,OACjB,IAAIuB,EAAMrB,KAAKF,MAAMa,MACjBW,EAAOD,EAAIE,QAAO,SAACC,GAAD,OAAWA,EAAKd,QAClCe,EAAOJ,EAAIE,QAAO,SAAAC,GAAI,OAAIA,EAAKd,QACnC,OACI,6BACI,uDAASY,EAAKI,QACd,4BACK1B,KAAKS,aAAY,IAEtB,uDAASgB,EAAKC,QACd,4BACK1B,KAAKS,aAAY,S,GA/BnBF,aCkFJoB,E,kDA9EX,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IAMV8B,aAAe,SAACC,GACZ,EAAKC,SAAS,CAAEC,SAAUF,EAAEG,OAAO9B,SARpB,EA2BnBI,QAAU,WACsB,KAAxB,EAAK2B,MAAMF,WACX,EAAKD,SAAS,CACVnB,MAAM,CACF,CACIM,MAAO,EAAKgB,MAAMF,SAClBrB,MAAM,IAHT,mBAKE,EAAKuB,MAAMtB,UAM1B,EAAKsB,MAAMF,SAAW,KAzCP,EA2CnBb,UAAY,SAACJ,GACT,EAAKgB,SAAS,CAEVnB,MAAO,EAAKsB,MAAMtB,MAAMY,QAAO,SAACC,EAAMU,GAAP,OAAiBA,GAASpB,OAC1D,WACCqB,aAAaC,QACT,QACAC,KAAKC,UAAU,EAAKL,MAAMtB,YAlDnB,EAsDnBI,OAAS,SAACmB,GACN,IAAIK,EAAW,EAAKN,MAAMtB,MAC1B4B,EAASL,GAAOxB,MAAQ6B,EAASL,GAAOxB,KACxC,EAAKoB,SAAS,CACVnB,MAAO4B,KAxDX,EAAKN,MAAQ,CACTF,SAAU,GACVpB,MAAO,CAAC,CAAEM,MAAO,MAAOP,MAAM,KAJnB,E,gEAYfV,KAAKwC,MAAMC,QACX,IAAI9B,EAAQwB,aAAaO,QAAQ,SAC7B/B,GACAX,KAAK8B,SAAS,CACVnB,MAAO0B,KAAKM,MAAMhC,O,2CAK1BwB,aAAaC,QACT,QACAC,KAAKC,UAAUtC,KAAKiC,MAAMtB,U,+BAsCxB,IAAD,SACuBX,KAAKiC,MAD5B,EACGtB,MADH,EACUoB,SACf,OACI,6BACI,kBAAC,EAAD,CAAOzB,QAASN,KAAKM,QACjBJ,MAAOF,KAAKiC,MAAMF,SAClB3B,SAAUJ,KAAK4B,aACf3B,KAAM,SAAA2C,GAAG,OAAI,EAAKJ,MAAQI,KAC9B,kBAAC,EAAD,CAAM1B,UAAWlB,KAAKkB,UAChBH,OAAUf,KAAKe,OACfJ,MAASX,KAAKiC,MAAMtB,a,GAxEnBJ,aCQHsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,SCdSC,EAFCC,IAAMC,gBCQL5C,EARJ,SAACV,GACV,OAAO,4BAEHA,EAAMuD,KAAKzC,KAAI,SAACY,GAAD,OAAQ,4BAAKA,EAAKP,YCFnCqC,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAkBXC,EAhBA,SAACzD,GACZ,OAAO,6BAECwD,EAAK1C,KACD,SAACY,GAAD,OACI,4BACIgC,IAAKhC,EACLnB,QAAS,kBAAIP,EAAM2D,QAAQjC,KAE1BA,QCQVkC,GCfInD,YCDGA,YFHP,WACX,OACI,6BACI,sCACA,kBAAC,EAAQoD,SAAT,MAEQ,SAACN,GAAD,OAAUA,EAAKA,KAAKzC,KAAI,SAACY,GAAD,OAAU,wBAAIgC,IAAKhC,GAAOA,SAG1D,kBAAC,EAAQmC,SAAT,MAEQ,gBAAEC,EAAF,EAAEA,WAAF,OAAgB,4BAAQvD,QAAS,kBAAIuD,EAAW,OAAhC,sBGN9BC,EAAS,SAAC/D,GACZ,OACI,yBAAKgE,MAAO,CACRC,MAAM,IACNC,OAAO,MAGP,sCACA,4BACI,kBAAC,EAAQL,SAAT,MAEQ,SAACN,GAAD,OAAUA,EAAKA,KAAKzC,KAAI,SAACY,GAAD,OAAQ,wBAAIgC,IAAKhC,GAAOA,UAI5D,kBAAC,EAAD,QAQZqC,EAAOI,aAAe,CAClBC,KAAM,OAGKL,QC5Bf1C,QAAQC,IAAI8B,GAOMC,IAAM5C,UCoLxB4D,IAASC,OAKP,kBAAC,EAAD,MAGAC,SAASC,eAAe,STvEpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.a2205fe6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// const btns = '添加';\r\n\r\nclass Input extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input\r\n                    ref={this.props.refs}\r\n                    value={this.props.value}\r\n                    type=\"text\"\r\n                    onChange={this.props.onChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>\r\n                    添加\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input","import React, { Component } from 'react'\r\nclass List extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    renderTodos = (done) => {\r\n        return this.props.todos.map((todo, idx) => {\r\n            if (done == todo.done) {\r\n                return <li>\r\n                    <input\r\n                        onClick={() => this.props.toggle(idx)}\r\n                        checked={done} type=\"checkbox\" />\r\n                    <span>{todo.title}</span>\r\n                    <button onClick={() => this.props.delButton(idx)}>删除</button>\r\n                    {/* ()=>this.delTodo(idx) 外面的小括号是事件处理函数，通过外面进行调用，里面才可以传参 */}\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        console.log(this.props);\r\n        let tds = this.props.todos;\r\n        let arr1 = tds.filter((item) => !item.done)\r\n        let arr2 = tds.filter(item => item.done)\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List","import React, { Component } from 'react';\r\nimport Input from './pages/Input';\r\nimport List from './pages/List';\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inpValue: '',\r\n            todos: [{ title: '123', done: false }]\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ inpValue: e.target.value })\r\n        //监听内容与state里面的inpValue绑定起来\r\n    }\r\n    componentDidMount() {\r\n        this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if (todos) {\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    addTodo = () => {\r\n        if (this.state.inpValue !== '') {\r\n            this.setState({\r\n                todos: [\r\n                    {\r\n                        title: this.state.inpValue,\r\n                        done: false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n        } else {\r\n            return;\r\n        }\r\n        this.state.inpValue = '';\r\n    }\r\n    delButton = (idx) => {\r\n        this.setState({\r\n            //setState是异步调用\r\n            todos: this.state.todos.filter((item, index) => index != idx)\r\n        }, () => {\r\n            localStorage.setItem(\r\n                'todos',\r\n                JSON.stringify(this.state.todos)\r\n            )\r\n        });\r\n    }\r\n    toggle = (index) => {\r\n        let newTodos = this.state.todos  //利用深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    render() {\r\n        const { todos, inpValue } = this.state;\r\n        return (\r\n            <div>\r\n                <Input addTodo={this.addTodo}\r\n                    value={this.state.inpValue}\r\n                    onChange={this.handleChange}\r\n                    refs={inp => this.input = inp} />\r\n                <List delButton={this.delButton}\r\n                      toggle = {this.toggle}\r\n                      todos = {this.state.todos}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n// import React from 'react'\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React from 'react';\r\n\r\nconst List = (props)=>{\r\n    return <ul>\r\n      {\r\n        props.data.map((item)=><li>{item.title}</li>)\r\n      }\r\n    </ul>\r\n  }\r\n\r\n  export default List;","import React from 'react';\r\n\r\n\r\nconst btns = [1, 2, 3, 4, 5];\r\n\r\nconst Button = (props) => {\r\n    return <div>\r\n        {\r\n            btns.map(\r\n                (item) => (\r\n                    <button\r\n                        key={item}\r\n                        onClick={()=>props.getData(item)}\r\n                    >\r\n                        {item}\r\n                    </button>\r\n                ))\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport Context from './context'\r\n// import Context from './context'\r\nconst Demo02 = () => {\r\n    return (\r\n        <div>\r\n            <h2>Demo02</h2>\r\n            <Context.Consumer>\r\n                {\r\n                    (data) => data.data.map((item) => <li key={item}>{item}</li>)\r\n                }\r\n            </Context.Consumer>\r\n            <Context.Consumer>\r\n                {\r\n                    ({changeData})=><button onClick={()=>changeData(123)}>点击</button>\r\n                }\r\n            </Context.Consumer>\r\n            {/* <Demo01 /> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Demo02","import React,{Component} from 'react';\r\nimport List from '../components/List';\r\nimport Button from '../components/Button'\r\n// import ReactDOM from 'react-dom';\r\n// import Home from './pages/Home';\r\n\r\n\r\nclass Home extends Component{\r\n    // console.log('construct');\r\n    constructor(props){\r\n      // console.log('construct')\r\n      super(props);\r\n      this.state = {\r\n        data:[]\r\n      }  \r\n    //   setTimeout(()=>{\r\n    //     this.setState({data:[4,5,6,7,8,9]})\r\n    //   },500)\r\n    // console.log('constructor')\r\n    // this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    componentDidMount(){\r\n      fetch('https://cnodejs.org/api/v1/topics')\r\n      .then(res=>res.json())\r\n      .then(({data})=>{\r\n        console.log(data);\r\n        this.setState({data})//data:data???什么原因\r\n      })\r\n      // console.log('didmount')\r\n    }\r\n    handleClick=()=>{\r\n      console.log('hello');\r\n    }\r\n    getData =(page)=>{\r\n      fetch('https://cnodejs.org/api/v1/topics?page='+page)\r\n      .then(res=>res.json())\r\n      .then(({data})=>{\r\n        console.log(data);\r\n        this.setState({data})//data:data.data ???什么原因\r\n      })\r\n    }\r\n    \r\n    render(){\r\n      // console.log('render')\r\n  \r\n      const{data} = this.state;\r\n        return <div>\r\n        <Button getData={this.getData}/> \r\n        {/* this指向的是哪 ?*/}\r\n        <List data={data}/>\r\n    </div>\r\n    }\r\n  }\r\n\r\n\r\n  //命名导出\r\n//   export{Home}\r\n  //默认导出(当前的文件只能导出一个  意味着不能写两个export)\r\n  export default Home;","// import React from 'react';\r\nimport React, { Component } from 'react'\r\n\r\n//组件名首字母一定要大写\r\n// import React, { Component } from 'react'\r\n\r\nclass Control extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos: [\r\n                { title: '1', done: false },\r\n                { title: '2', done: true },\r\n                { title: '3', done: false },\r\n                { title: '4', done: false }\r\n            ]\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ inpValue: e.target.value })\r\n        console.log(this.input.value)\r\n    }\r\n    componentDidMount() {\r\n        this.input.focus();\r\n        // console.log(this.input.value)\r\n        let todos = localStorage.getItem('todos');\r\n        if (todos) {\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    compponetDidUpdate() {\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n        // return true\r\n    }\r\n    clickButton = () => {\r\n        //不建议在state中使用push方法，因为不能直接修改State，而push会破坏它\r\n        // const list = this.state.todos;\r\n        // list.push({title:this.state.inpValue});\r\n        // this.setState({list:list})\r\n        if (this.state.inpValue !== '') {\r\n            this.setState({\r\n                todos: [\r\n                    {\r\n                        title: this.state.inpValue,\r\n                        done: false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n        }else{\r\n            // alert(\"输入不能为空\");\r\n            return;\r\n        }\r\n        //一下两种都可以把初值赋值为0\r\n        this.setState({inpValue:''});\r\n        // this.state.inpValue = '';\r\n    }\r\n    delButton = (idx) => {\r\n        //方法一\r\n        // const list = this.state.todos;\r\n        // list.splice(index,1);\r\n        // this.setState({list:list})\r\n        //方法二\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))  //\r\n        // let newTodos = this.state.todos  //利用深拷贝\r\n        // newTodos.splice(index,1);\r\n        // this.setState({todos:this.state.todos})\r\n\r\n        //方法三\r\n        this.setState({\r\n            //setState是异步调用\r\n            todos: this.state.todos.filter((item, index) => index != idx)\r\n        }, () => {\r\n            localStorage.setItem(\r\n                'todos',\r\n                JSON.stringify(this.state.todos)\r\n            )\r\n        });\r\n\r\n    }\r\n    toggle = (index) => {\r\n        let newTodos = this.state.todos  //利用深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    renderTodos = (done) => {\r\n        return this.state.todos.map((todo, idx) => {\r\n            if (done == todo.done) {\r\n                return <li>\r\n                    <input\r\n                        onClick={() => this.toggle(idx)}\r\n                        checked={done} type=\"checkbox\" />\r\n                    {/* <span>{todo.title}</span> */}\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    {/* dangerouslySetInnerHTML  是React 提供的替换浏览器 DOM 中的 innerHTML 接口的一个函数 */}\r\n                    <button onClick={() => this.delButton(idx)}>删除</button>\r\n                    {/* ()=>this.delTodo(idx) 外面的小括号是事件处理函数，通过外面进行调用，里面才可以传参 */}\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        // localStorage.setItem(\r\n        //     'todos',\r\n        //     JSON.stringify(this.state.todos)\r\n        //     )\r\n        const { todos, inpValue } = this.state;\r\n        // const {todos1,inpValue} = this.state;\r\n        let arr1 = todos.filter((item) => !item.done)//为什么加{}不对？ 原因：加{}后必须有return来返回值\r\n        let arr2 = todos.filter(item => item.done)\r\n        // console.log(arr1);\r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor=\"inp\">todolist</label>\r\n                <input\r\n                    ref={inp => this.input = inp}\r\n                    value={inpValue}\r\n                    type=\"text\"\r\n                    onChange={this.handleChange}\r\n                    placeholder=\"ToDo\" />\r\n                <button\r\n                    onClick={this.clickButton}>添加</button>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul style={{ color: 'red' }}>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Control\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from './context'\r\nimport Demo02 from './Demo2'\r\n\r\n//rcc\r\n//rafc\r\n//rafce\r\nconst Demo01 = (props) => {\r\n    return (\r\n        <div style={{\r\n            width:100,\r\n            height:100\r\n        }}>\r\n            {/* {props.name} */}\r\n            <h2>Demo01</h2>\r\n            <ul>\r\n                <Context.Consumer>\r\n                    {\r\n                        (data) => data.data.map((item)=><li key={item}>{item}</li>)//前一个data代表的是Provider value后面跟着的值 //后面的data代表的是一个真实的值\r\n                    }\r\n                </Context.Consumer>\r\n            </ul>\r\n            <Demo02 />\r\n        </div>\r\n    )\r\n}\r\n\r\nDemo01.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n}\r\nDemo01.defaultProps = {\r\n    name: 'tom'\r\n}\r\n\r\nexport default Demo01\r\n","import React from 'react'\r\nimport Context from './context'\r\nimport Demo01 from './Demo01';\r\nimport { render } from 'react-dom'\r\n// import Demo02 from './Demo2';\r\n\r\n\r\nconsole.log(Context);\r\n\r\n// const App = () => {\r\n//     let data ={\r\n//         data:['hello','context']\r\n\r\n//     }\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data: ['hello', 'context'],\r\n        }\r\n    }\r\n    changeData = (newData) => {\r\n        this.setState({ data: [...this.state.data, newData]})\r\n    }\r\nrender(){\r\n    return (\r\n        <Context.Provider value={{\r\n            data:this.state.data,\r\n            changeData:this.changeData\r\n        }}>\r\n\r\n            {/*在data=['hello','context']的情况下  {data}等效于{{data:data}} */}\r\n            <Demo01 />\r\n            {/* <Demo02 /> */}\r\n        </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './TodoList'\nimport * as serviceWorker from './serviceWorker';\n// import Hoc,{Detail} from './pages/HOC'\nimport Hooks from './pages/Hooks'\nimport Context from './pages/context'\n\n\n\n// import {Home} from './pages/Home';//命名导出写法\nimport Home from './pages/Home';//默认导出写法\nimport Control from './components/Control';//默认导出写法\nimport Demo01 from './pages/Demo01';\nimport App from './pages/App'\n\n\n// import List from './components/List';\n\n// import $ from 'jquery';\n\n// const List = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map((item)=><li>{item.title}</li>)\n//     }\n//   </ul>\n// }\n\n// const Buttons = ()=>{\n//   const btns = [1,2,3,4,5];\n//   const handleClick =(num)=>{\n//     console.log(num);\n//   }\n//   return <div>\n//     {\n//       btns.map((item)=>\n//         <button \n//         key={item}\n//         onClick={()=>handleClick(item)}>{item}</button>)//为啥小括号不能加\n//         //外层是事件调用函数，内层是普通函数\n//         //内层括号里放的是点击对象\n//     }\n//   </div>\n// }\n\n\n// class Home extends React.Component{\n//   // console.log('construct');\n//   constructor(props){\n//     // console.log('construct')\n//     super(props);\n//     this.state = {\n//       data:[]\n//     }  \n//   //   setTimeout(()=>{\n//   //     this.setState({data:[4,5,6,7,8,9]})\n//   //   },500)\n//   // console.log('constructor')\n//   // this.handleClick = this.handleClick.bind(this);\n//   }\n//   componentDidMount(){\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then(({data})=>{\n//       console.log(data);\n//       this.setState({data})//data:data???什么原因\n//     })\n//     // console.log('didmount')\n//   }\n//   handleClick=()=>{\n//     console.log('hello');\n//   }\n//   getData =(page)=>{\n//     fetch('https://cnodejs.org/api/v1/topics?page='+page)\n//     .then(res=>res.json())\n//     .then(({data})=>{\n//       console.log(data);\n//       this.setState({data})//data:data.data ???什么原因\n//     })\n//   }\n\n//   render(){\n//     // console.log('render')\n\n//     const{data} = this.state;\n//     const btns = [1,2,3,4,5];\n//     return<div>\n//       {/* <Buttons /> */}\n//       {\n//         btns.map(\n//           (item)=>(\n//             <button\n//               key={item}\n//               onClick={()=>this.getData(item)}\n//             >\n//               {item}\n//             </button>\n//           ))\n//       }\n//       <List data={data}/></div>\n//   }\n// }\n\n\n// let ele = <h1 id=\"title\" className='tit'>react<div>{['hello', 'world']}</div></h1>;\n//组件声明\n//函数组件\n//UI组件，木偶组件\n\n// function App(props){\n//   const{title,id} =props;\n//   return<div>\n//     {/* <h1>组件内容</h1>  */}\n//     <div>{title}</div>\n//     <div>{id}</div>\n//   </div>\n// }\n\n// ReactDOM.render(\n//   <App title='abc' id=\"app\"/>,\n//   document.getElementById('root')\n// );\n\n//智能组件\n// class Demo extends React.Component{\n\n//   constructor(){\n//     super();\n//     //声明一个状态\n//     this.state = {\n//       name:new Date().toLocaleString()\n//     }\n//     setInterval(()=>{\n//       this.setState({name:new Date().toLocaleString()})\n//     },1000)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title='任意值' id=\"app\"/>\n//       <App title='任意值' id=\"app\"/>\n//       {/* <App title={this.state.name} id=\"app\"/> */}\n//     </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Demo />,\n//   document.getElementById('root')\n// );\n// let ReactDOM = {\n//   //将jsx对象渲染到DOM中\n//   render(eleObj, container) {\n//     //解构\n//     const { type, props } = eleObj;\n//     //创建第一层节点\n//     let ele = document.createElement(type);\n//     //遍历属性对象，将属性添加到第一层节点\n//     for (const prop in props) {\n//       // if(prop == 'className'){\n//       //   // ele.setAttribut('class',props[prop]) //写法一\n//       // }\n//       if (prop == 'children') {\n//         if (typeof props.children == 'string') {\n//           const txtNode = document.createTextNode(props.children);\n//           ele.appendChild(txtNode);\n//           break;\n//         }\n//         //将第一层节点对象的子元素添加进去\n//         props.children.forEach((child) => {\n//           if (typeof child == 'string') {\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n//           } else {\n//             ReactDOM.render(child, ele);\n//           }\n//         })\n//       } else {\n//         ele[prop] = props[prop];\n//       }\n//     }\n//     //将第一层节点添加到DOM中\n//     container.appendChild(ele);\n//   }\n// }\n\n\n// let ele = React.createElement(\n//   \"h1\",\n//   {id:\"title\"},\n//   \"hello world\"\n// )\nReactDOM.render(\n  // console.log(render1),\n  // <Context.Provider value=\"123\">\n  //   <Hooks />\n  // </Context.Provider>,\n  <TodoList />,\n  // <Home />,\n  // <Control />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}